/* tslint:disable */
/* eslint-disable */
/**
 * iCare 依赖管理 API
 * iCare 应用依赖管理系统的 RESTful API 文档  ## 功能特性 - 依赖项查询和管理 - 版本更新和安全扫描 - 依赖树结构展示 - 统计信息获取  ## 认证方式 使用 Bearer Token 认证，请在请求头中添加： ``` Authorization: Bearer <your-token> ```
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@icare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from './base';

/**
 *
 * @export
 * @interface ArthasInstanceInfo
 */
export interface ArthasInstanceInfo {
  /**
   * 实例唯一标识
   * @type {string}
   * @memberof ArthasInstanceInfo
   */
  instanceId?: string;
  /**
   * 实例名称
   * @type {string}
   * @memberof ArthasInstanceInfo
   */
  name?: string;
  /**
   * 进程ID
   * @type {number}
   * @memberof ArthasInstanceInfo
   */
  pid?: number;
  /**
   * 主机IP
   * @type {string}
   * @memberof ArthasInstanceInfo
   */
  host?: string;
  /**
   * 端口
   * @type {number}
   * @memberof ArthasInstanceInfo
   */
  port?: number;
  /**
   * 内存使用情况
   * @type {string}
   * @memberof ArthasInstanceInfo
   */
  memoryUsage?: string;
  /**
   * CPU使用情况
   * @type {string}
   * @memberof ArthasInstanceInfo
   */
  cpuUsage?: string;
  /**
   * 实例状态
   * @type {string}
   * @memberof ArthasInstanceInfo
   */
  status?: ArthasInstanceInfoStatusEnum;
  /**
   * Arthas 状态
   * @type {string}
   * @memberof ArthasInstanceInfo
   */
  arthasStatus?: ArthasInstanceInfoArthasStatusEnum;
}

export const ArthasInstanceInfoStatusEnum = {
  Running: 'running',
  Offline: 'offline',
} as const;

export type ArthasInstanceInfoStatusEnum =
  (typeof ArthasInstanceInfoStatusEnum)[keyof typeof ArthasInstanceInfoStatusEnum];
export const ArthasInstanceInfoArthasStatusEnum = {
  Connected: 'connected',
  Disconnected: 'disconnected',
} as const;

export type ArthasInstanceInfoArthasStatusEnum =
  (typeof ArthasInstanceInfoArthasStatusEnum)[keyof typeof ArthasInstanceInfoArthasStatusEnum];

/**
 *
 * @export
 * @interface ArthasInstanceListResponse
 */
export interface ArthasInstanceListResponse {
  /**
   *
   * @type {boolean}
   * @memberof ArthasInstanceListResponse
   */
  success?: boolean;
  /**
   *
   * @type {Array<ArthasInstanceInfo>}
   * @memberof ArthasInstanceListResponse
   */
  data?: Array<ArthasInstanceInfo>;
  /**
   *
   * @type {string}
   * @memberof ArthasInstanceListResponse
   */
  message?: string;
}
/**
 *
 * @export
 * @interface DependencyApiResponse
 */
export interface DependencyApiResponse {
  /**
   * 请求是否成功
   * @type {boolean}
   * @memberof DependencyApiResponse
   */
  success: boolean;
  /**
   *
   * @type {DependencyApiResponseData}
   * @memberof DependencyApiResponse
   */
  data: DependencyApiResponseData;
  /**
   * 附加消息
   * @type {string}
   * @memberof DependencyApiResponse
   */
  message?: string;
}
/**
 *
 * @export
 * @interface DependencyApiResponseData
 */
export interface DependencyApiResponseData {
  /**
   *
   * @type {DependencyStats}
   * @memberof DependencyApiResponseData
   */
  stats: DependencyStats;
  /**
   *
   * @type {Array<DependencyTreeNode>}
   * @memberof DependencyApiResponseData
   */
  tree: Array<DependencyTreeNode>;
  /**
   *
   * @type {Array<DependencyItem>}
   * @memberof DependencyApiResponseData
   */
  dependencies: Array<DependencyItem>;
}
/**
 *
 * @export
 * @interface DependencyDetailResponse
 */
export interface DependencyDetailResponse {
  /**
   *
   * @type {boolean}
   * @memberof DependencyDetailResponse
   */
  success: boolean;
  /**
   *
   * @type {DependencyDetailResponseData}
   * @memberof DependencyDetailResponse
   */
  data: DependencyDetailResponseData;
}
/**
 *
 * @export
 * @interface DependencyDetailResponseData
 */
export interface DependencyDetailResponseData {
  /**
   *
   * @type {string}
   * @memberof DependencyDetailResponseData
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof DependencyDetailResponseData
   */
  currentVersion?: string;
  /**
   *
   * @type {string}
   * @memberof DependencyDetailResponseData
   */
  latestVersion?: string;
  /**
   *
   * @type {string}
   * @memberof DependencyDetailResponseData
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof DependencyDetailResponseData
   */
  license?: string;
  /**
   *
   * @type {string}
   * @memberof DependencyDetailResponseData
   */
  homepage?: string;
  /**
   *
   * @type {string}
   * @memberof DependencyDetailResponseData
   */
  repository?: string;
  /**
   *
   * @type {string}
   * @memberof DependencyDetailResponseData
   */
  maintainer?: string;
  /**
   *
   * @type {number}
   * @memberof DependencyDetailResponseData
   */
  downloads?: number;
  /**
   *
   * @type {Array<DependencyDetailResponseDataVersionHistoryInner>}
   * @memberof DependencyDetailResponseData
   */
  versionHistory?: Array<DependencyDetailResponseDataVersionHistoryInner>;
  /**
   *
   * @type {DependencyDetailResponseDataSecurityReport}
   * @memberof DependencyDetailResponseData
   */
  securityReport?: DependencyDetailResponseDataSecurityReport;
  /**
   *
   * @type {DependencyDetailResponseDataUsageInfo}
   * @memberof DependencyDetailResponseData
   */
  usageInfo?: DependencyDetailResponseDataUsageInfo;
}
/**
 *
 * @export
 * @interface DependencyDetailResponseDataSecurityReport
 */
export interface DependencyDetailResponseDataSecurityReport {
  /**
   *
   * @type {Array<DependencyDetailResponseDataSecurityReportVulnerabilitiesInner>}
   * @memberof DependencyDetailResponseDataSecurityReport
   */
  vulnerabilities?: Array<DependencyDetailResponseDataSecurityReportVulnerabilitiesInner>;
  /**
   *
   * @type {string}
   * @memberof DependencyDetailResponseDataSecurityReport
   */
  lastScanDate?: string;
}
/**
 *
 * @export
 * @interface DependencyDetailResponseDataSecurityReportVulnerabilitiesInner
 */
export interface DependencyDetailResponseDataSecurityReportVulnerabilitiesInner {
  /**
   *
   * @type {string}
   * @memberof DependencyDetailResponseDataSecurityReportVulnerabilitiesInner
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof DependencyDetailResponseDataSecurityReportVulnerabilitiesInner
   */
  severity?: DependencyDetailResponseDataSecurityReportVulnerabilitiesInnerSeverityEnum;
  /**
   *
   * @type {string}
   * @memberof DependencyDetailResponseDataSecurityReportVulnerabilitiesInner
   */
  description?: string;
}

export const DependencyDetailResponseDataSecurityReportVulnerabilitiesInnerSeverityEnum =
  {
    Critical: 'critical',
    High: 'high',
    Medium: 'medium',
    Low: 'low',
  } as const;

export type DependencyDetailResponseDataSecurityReportVulnerabilitiesInnerSeverityEnum =
  (typeof DependencyDetailResponseDataSecurityReportVulnerabilitiesInnerSeverityEnum)[keyof typeof DependencyDetailResponseDataSecurityReportVulnerabilitiesInnerSeverityEnum];

/**
 *
 * @export
 * @interface DependencyDetailResponseDataUsageInfo
 */
export interface DependencyDetailResponseDataUsageInfo {
  /**
   *
   * @type {Array<string>}
   * @memberof DependencyDetailResponseDataUsageInfo
   */
  services?: Array<string>;
  /**
   *
   * @type {number}
   * @memberof DependencyDetailResponseDataUsageInfo
   */
  totalProjects?: number;
}
/**
 *
 * @export
 * @interface DependencyDetailResponseDataVersionHistoryInner
 */
export interface DependencyDetailResponseDataVersionHistoryInner {
  /**
   *
   * @type {string}
   * @memberof DependencyDetailResponseDataVersionHistoryInner
   */
  version?: string;
  /**
   *
   * @type {string}
   * @memberof DependencyDetailResponseDataVersionHistoryInner
   */
  releaseDate?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof DependencyDetailResponseDataVersionHistoryInner
   */
  changes?: Array<string>;
}
/**
 *
 * @export
 * @interface DependencyItem
 */
export interface DependencyItem {
  /**
   * 依赖唯一标识
   * @type {string}
   * @memberof DependencyItem
   */
  key: string;
  /**
   * 依赖名称
   * @type {string}
   * @memberof DependencyItem
   */
  name: string;
  /**
   * 当前版本
   * @type {string}
   * @memberof DependencyItem
   */
  version: string;
  /**
   * 最新版本
   * @type {string}
   * @memberof DependencyItem
   */
  latestVersion: string;
  /**
   * 版本状态
   * @type {string}
   * @memberof DependencyItem
   */
  status: DependencyItemStatusEnum;
  /**
   * 安全级别
   * @type {string}
   * @memberof DependencyItem
   */
  security: DependencyItemSecurityEnum;
  /**
   * 许可证
   * @type {string}
   * @memberof DependencyItem
   */
  license: string;
  /**
   * 文件大小
   * @type {string}
   * @memberof DependencyItem
   */
  size: string;
  /**
   * 使用该依赖的服务列表
   * @type {Array<string>}
   * @memberof DependencyItem
   */
  usedBy: Array<string>;
  /**
   * 依赖描述
   * @type {string}
   * @memberof DependencyItem
   */
  description?: string;
  /**
   * 项目主页
   * @type {string}
   * @memberof DependencyItem
   */
  homepage?: string;
  /**
   * 代码仓库
   * @type {string}
   * @memberof DependencyItem
   */
  repository?: string;
  /**
   * 最后更新日期
   * @type {string}
   * @memberof DependencyItem
   */
  lastUpdate?: string;
}

export const DependencyItemStatusEnum = {
  Latest: 'latest',
  Outdated: 'outdated',
  Critical: 'critical',
} as const;

export type DependencyItemStatusEnum =
  (typeof DependencyItemStatusEnum)[keyof typeof DependencyItemStatusEnum];
export const DependencyItemSecurityEnum = {
  Safe: 'safe',
  Warning: 'warning',
  Vulnerable: 'vulnerable',
} as const;

export type DependencyItemSecurityEnum =
  (typeof DependencyItemSecurityEnum)[keyof typeof DependencyItemSecurityEnum];

/**
 *
 * @export
 * @interface DependencyStats
 */
export interface DependencyStats {
  /**
   * 总依赖数
   * @type {number}
   * @memberof DependencyStats
   */
  totalDependencies: number;
  /**
   * 安全依赖数
   * @type {number}
   * @memberof DependencyStats
   */
  safeDependencies: number;
  /**
   * 过期依赖数
   * @type {number}
   * @memberof DependencyStats
   */
  outdatedDependencies: number;
  /**
   * 存在漏洞的依赖数
   * @type {number}
   * @memberof DependencyStats
   */
  vulnerableDependencies: number;
}
/**
 *
 * @export
 * @interface DependencyTreeNode
 */
export interface DependencyTreeNode {
  /**
   * 节点标题
   * @type {string}
   * @memberof DependencyTreeNode
   */
  title: string;
  /**
   * 节点唯一标识
   * @type {string}
   * @memberof DependencyTreeNode
   */
  key: string;
  /**
   *
   * @type {Array<DependencyTreeNode>}
   * @memberof DependencyTreeNode
   */
  children?: Array<DependencyTreeNode>;
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
  /**
   *
   * @type {boolean}
   * @memberof ErrorResponse
   */
  success: boolean;
  /**
   * 错误消息
   * @type {string}
   * @memberof ErrorResponse
   */
  message: string;
  /**
   * 错误代码
   * @type {string}
   * @memberof ErrorResponse
   */
  code?: string;
  /**
   * 详细错误信息
   * @type {{ [key: string]: any; }}
   * @memberof ErrorResponse
   */
  details?: { [key: string]: any };
}
/**
 *
 * @export
 * @interface OperationResponse
 */
export interface OperationResponse {
  /**
   * 操作是否成功
   * @type {boolean}
   * @memberof OperationResponse
   */
  success: boolean;
  /**
   * 操作结果消息
   * @type {string}
   * @memberof OperationResponse
   */
  message?: string;
}
/**
 *
 * @export
 * @interface ScanResponse
 */
export interface ScanResponse {
  /**
   * 扫描是否成功
   * @type {boolean}
   * @memberof ScanResponse
   */
  success: boolean;
  /**
   * 扫描结果消息
   * @type {string}
   * @memberof ScanResponse
   */
  message?: string;
  /**
   *
   * @type {ScanResponseScanResult}
   * @memberof ScanResponse
   */
  scanResult?: ScanResponseScanResult;
}
/**
 *
 * @export
 * @interface ScanResponseScanResult
 */
export interface ScanResponseScanResult {
  /**
   * 扫描的依赖总数
   * @type {number}
   * @memberof ScanResponseScanResult
   */
  totalScanned?: number;
  /**
   * 发现的漏洞总数
   * @type {number}
   * @memberof ScanResponseScanResult
   */
  vulnerabilitiesFound?: number;
  /**
   * 严重漏洞数量
   * @type {number}
   * @memberof ScanResponseScanResult
   */
  criticalCount?: number;
  /**
   * 高危漏洞数量
   * @type {number}
   * @memberof ScanResponseScanResult
   */
  highCount?: number;
  /**
   * 中危漏洞数量
   * @type {number}
   * @memberof ScanResponseScanResult
   */
  mediumCount?: number;
  /**
   * 低危漏洞数量
   * @type {number}
   * @memberof ScanResponseScanResult
   */
  lowCount?: number;
  /**
   * 扫描时间
   * @type {string}
   * @memberof ScanResponseScanResult
   */
  scanTime?: string;
}
/**
 *
 * @export
 * @interface UpdateDependencyRequest
 */
export interface UpdateDependencyRequest {
  /**
   * 依赖名称
   * @type {string}
   * @memberof UpdateDependencyRequest
   */
  name: string;
  /**
   * 目标版本
   * @type {string}
   * @memberof UpdateDependencyRequest
   */
  version: string;
}

/**
 * DependenciesApi - axios parameter creator
 * @export
 */
export const DependenciesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 获取指定依赖的详细信息，包括版本历史、安全报告等
     * @summary 获取依赖详情
     * @param {string} name 依赖名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dependenciesDetailNameGet: async (
      name: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('dependenciesDetailNameGet', 'name', name);
      const localVarPath = `/dependencies/detail/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(name))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取系统中所有依赖项的详细信息，支持搜索和过滤
     * @summary 获取依赖列表
     * @param {string} [keyword] 搜索关键词，可匹配依赖名称或描述
     * @param {DependenciesGetStatusEnum} [status] 依赖状态过滤
     * @param {DependenciesGetSecurityEnum} [security] 安全级别过滤
     * @param {string} [service] 使用该依赖的服务名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dependenciesGet: async (
      keyword?: string,
      status?: DependenciesGetStatusEnum,
      security?: DependenciesGetSecurityEnum,
      service?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/dependencies`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (keyword !== undefined) {
        localVarQueryParameter['keyword'] = keyword;
      }

      if (status !== undefined) {
        localVarQueryParameter['status'] = status;
      }

      if (security !== undefined) {
        localVarQueryParameter['security'] = security;
      }

      if (service !== undefined) {
        localVarQueryParameter['service'] = service;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DependenciesApi - functional programming interface
 * @export
 */
export const DependenciesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    DependenciesApiAxiosParamCreator(configuration);
  return {
    /**
     * 获取指定依赖的详细信息，包括版本历史、安全报告等
     * @summary 获取依赖详情
     * @param {string} name 依赖名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dependenciesDetailNameGet(
      name: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DependencyDetailResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.dependenciesDetailNameGet(
          name,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DependenciesApi.dependenciesDetailNameGet']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 获取系统中所有依赖项的详细信息，支持搜索和过滤
     * @summary 获取依赖列表
     * @param {string} [keyword] 搜索关键词，可匹配依赖名称或描述
     * @param {DependenciesGetStatusEnum} [status] 依赖状态过滤
     * @param {DependenciesGetSecurityEnum} [security] 安全级别过滤
     * @param {string} [service] 使用该依赖的服务名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dependenciesGet(
      keyword?: string,
      status?: DependenciesGetStatusEnum,
      security?: DependenciesGetSecurityEnum,
      service?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DependencyApiResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dependenciesGet(
        keyword,
        status,
        security,
        service,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DependenciesApi.dependenciesGet']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * DependenciesApi - factory interface
 * @export
 */
export const DependenciesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DependenciesApiFp(configuration);
  return {
    /**
     * 获取指定依赖的详细信息，包括版本历史、安全报告等
     * @summary 获取依赖详情
     * @param {string} name 依赖名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dependenciesDetailNameGet(
      name: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<DependencyDetailResponse> {
      return localVarFp
        .dependenciesDetailNameGet(name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取系统中所有依赖项的详细信息，支持搜索和过滤
     * @summary 获取依赖列表
     * @param {string} [keyword] 搜索关键词，可匹配依赖名称或描述
     * @param {DependenciesGetStatusEnum} [status] 依赖状态过滤
     * @param {DependenciesGetSecurityEnum} [security] 安全级别过滤
     * @param {string} [service] 使用该依赖的服务名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dependenciesGet(
      keyword?: string,
      status?: DependenciesGetStatusEnum,
      security?: DependenciesGetSecurityEnum,
      service?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<DependencyApiResponse> {
      return localVarFp
        .dependenciesGet(keyword, status, security, service, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DependenciesApi - interface
 * @export
 * @interface DependenciesApi
 */
export interface DependenciesApiInterface {
  /**
   * 获取指定依赖的详细信息，包括版本历史、安全报告等
   * @summary 获取依赖详情
   * @param {string} name 依赖名称
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DependenciesApiInterface
   */
  dependenciesDetailNameGet(
    name: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<DependencyDetailResponse>;

  /**
   * 获取系统中所有依赖项的详细信息，支持搜索和过滤
   * @summary 获取依赖列表
   * @param {string} [keyword] 搜索关键词，可匹配依赖名称或描述
   * @param {DependenciesGetStatusEnum} [status] 依赖状态过滤
   * @param {DependenciesGetSecurityEnum} [security] 安全级别过滤
   * @param {string} [service] 使用该依赖的服务名称
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DependenciesApiInterface
   */
  dependenciesGet(
    keyword?: string,
    status?: DependenciesGetStatusEnum,
    security?: DependenciesGetSecurityEnum,
    service?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<DependencyApiResponse>;
}

/**
 * DependenciesApi - object-oriented interface
 * @export
 * @class DependenciesApi
 * @extends {BaseAPI}
 */
export class DependenciesApi
  extends BaseAPI
  implements DependenciesApiInterface
{
  /**
   * 获取指定依赖的详细信息，包括版本历史、安全报告等
   * @summary 获取依赖详情
   * @param {string} name 依赖名称
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DependenciesApi
   */
  public dependenciesDetailNameGet(
    name: string,
    options?: RawAxiosRequestConfig
  ) {
    return DependenciesApiFp(this.configuration)
      .dependenciesDetailNameGet(name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取系统中所有依赖项的详细信息，支持搜索和过滤
   * @summary 获取依赖列表
   * @param {string} [keyword] 搜索关键词，可匹配依赖名称或描述
   * @param {DependenciesGetStatusEnum} [status] 依赖状态过滤
   * @param {DependenciesGetSecurityEnum} [security] 安全级别过滤
   * @param {string} [service] 使用该依赖的服务名称
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DependenciesApi
   */
  public dependenciesGet(
    keyword?: string,
    status?: DependenciesGetStatusEnum,
    security?: DependenciesGetSecurityEnum,
    service?: string,
    options?: RawAxiosRequestConfig
  ) {
    return DependenciesApiFp(this.configuration)
      .dependenciesGet(keyword, status, security, service, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const DependenciesGetStatusEnum = {
  Latest: 'latest',
  Outdated: 'outdated',
  Critical: 'critical',
} as const;
export type DependenciesGetStatusEnum =
  (typeof DependenciesGetStatusEnum)[keyof typeof DependenciesGetStatusEnum];
/**
 * @export
 */
export const DependenciesGetSecurityEnum = {
  Safe: 'safe',
  Warning: 'warning',
  Vulnerable: 'vulnerable',
} as const;
export type DependenciesGetSecurityEnum =
  (typeof DependenciesGetSecurityEnum)[keyof typeof DependenciesGetSecurityEnum];

/**
 * SecurityApi - axios parameter creator
 * @export
 */
export const SecurityApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 对系统中的所有依赖进行安全漏洞扫描
     * @summary 安全漏洞扫描
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dependenciesScanPost: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/dependencies/scan`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SecurityApi - functional programming interface
 * @export
 */
export const SecurityApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SecurityApiAxiosParamCreator(configuration);
  return {
    /**
     * 对系统中的所有依赖进行安全漏洞扫描
     * @summary 安全漏洞扫描
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dependenciesScanPost(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScanResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.dependenciesScanPost(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['SecurityApi.dependenciesScanPost']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * SecurityApi - factory interface
 * @export
 */
export const SecurityApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SecurityApiFp(configuration);
  return {
    /**
     * 对系统中的所有依赖进行安全漏洞扫描
     * @summary 安全漏洞扫描
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dependenciesScanPost(
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ScanResponse> {
      return localVarFp
        .dependenciesScanPost(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SecurityApi - interface
 * @export
 * @interface SecurityApi
 */
export interface SecurityApiInterface {
  /**
   * 对系统中的所有依赖进行安全漏洞扫描
   * @summary 安全漏洞扫描
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SecurityApiInterface
   */
  dependenciesScanPost(
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ScanResponse>;
}

/**
 * SecurityApi - object-oriented interface
 * @export
 * @class SecurityApi
 * @extends {BaseAPI}
 */
export class SecurityApi extends BaseAPI implements SecurityApiInterface {
  /**
   * 对系统中的所有依赖进行安全漏洞扫描
   * @summary 安全漏洞扫描
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SecurityApi
   */
  public dependenciesScanPost(options?: RawAxiosRequestConfig) {
    return SecurityApiFp(this.configuration)
      .dependenciesScanPost(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ToolsApi - axios parameter creator
 * @export
 */
export const ToolsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 启动并连接指定实例的 Arthas。连接成功后，前端应通过 WebSocket 连接服务器以实时获取 Arthas 控制台输出。
     * @summary 启动并连接目标实例的 Arthas
     * @param {string} instanceId 实例唯一标识
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arthasInstanceIdConnectPost: async (
      instanceId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'instanceId' is not null or undefined
      assertParamExists(
        'arthasInstanceIdConnectPost',
        'instanceId',
        instanceId
      );
      const localVarPath = `/arthas/{instanceId}/connect`.replace(
        `{${'instanceId'}}`,
        encodeURIComponent(String(instanceId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 断开指定实例的 Arthas 连接
     * @summary 断开与目标实例 Arthas 的连接
     * @param {string} instanceId 实例唯一标识
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arthasInstanceIdDisconnectPost: async (
      instanceId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'instanceId' is not null or undefined
      assertParamExists(
        'arthasInstanceIdDisconnectPost',
        'instanceId',
        instanceId
      );
      const localVarPath = `/arthas/{instanceId}/disconnect`.replace(
        `{${'instanceId'}}`,
        encodeURIComponent(String(instanceId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 重新连接指定实例的 Arthas
     * @summary 重新连接目标实例的 Arthas
     * @param {string} instanceId 实例唯一标识
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arthasInstanceIdReconnectPost: async (
      instanceId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'instanceId' is not null or undefined
      assertParamExists(
        'arthasInstanceIdReconnectPost',
        'instanceId',
        instanceId
      );
      const localVarPath = `/arthas/{instanceId}/reconnect`.replace(
        `{${'instanceId'}}`,
        encodeURIComponent(String(instanceId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 建立 WebSocket 连接以实时接收 Arthas 控制台输出和发送命令。   客户端应在调用 `/connect` 成功后，使用此接口建立 WebSocket 连接。   WebSocket 地址示例：`ws://localhost:8080/api/arthas/{instanceId}/ws`
     * @summary Arthas 控制台 WebSocket
     * @param {string} instanceId 实例唯一标识
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arthasInstanceIdWsGet: async (
      instanceId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'instanceId' is not null or undefined
      assertParamExists('arthasInstanceIdWsGet', 'instanceId', instanceId);
      const localVarPath = `/arthas/{instanceId}/ws`.replace(
        `{${'instanceId'}}`,
        encodeURIComponent(String(instanceId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取所有应用实例及其 Arthas 状态
     * @summary 查询所有实例列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arthasInstancesGet: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/arthas/instances`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ToolsApi - functional programming interface
 * @export
 */
export const ToolsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ToolsApiAxiosParamCreator(configuration);
  return {
    /**
     * 启动并连接指定实例的 Arthas。连接成功后，前端应通过 WebSocket 连接服务器以实时获取 Arthas 控制台输出。
     * @summary 启动并连接目标实例的 Arthas
     * @param {string} instanceId 实例唯一标识
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async arthasInstanceIdConnectPost(
      instanceId: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OperationResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.arthasInstanceIdConnectPost(
          instanceId,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ToolsApi.arthasInstanceIdConnectPost']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 断开指定实例的 Arthas 连接
     * @summary 断开与目标实例 Arthas 的连接
     * @param {string} instanceId 实例唯一标识
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async arthasInstanceIdDisconnectPost(
      instanceId: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OperationResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.arthasInstanceIdDisconnectPost(
          instanceId,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ToolsApi.arthasInstanceIdDisconnectPost']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 重新连接指定实例的 Arthas
     * @summary 重新连接目标实例的 Arthas
     * @param {string} instanceId 实例唯一标识
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async arthasInstanceIdReconnectPost(
      instanceId: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OperationResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.arthasInstanceIdReconnectPost(
          instanceId,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ToolsApi.arthasInstanceIdReconnectPost']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 建立 WebSocket 连接以实时接收 Arthas 控制台输出和发送命令。   客户端应在调用 `/connect` 成功后，使用此接口建立 WebSocket 连接。   WebSocket 地址示例：`ws://localhost:8080/api/arthas/{instanceId}/ws`
     * @summary Arthas 控制台 WebSocket
     * @param {string} instanceId 实例唯一标识
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async arthasInstanceIdWsGet(
      instanceId: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.arthasInstanceIdWsGet(
          instanceId,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ToolsApi.arthasInstanceIdWsGet']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 获取所有应用实例及其 Arthas 状态
     * @summary 查询所有实例列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async arthasInstancesGet(
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ArthasInstanceListResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.arthasInstancesGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ToolsApi.arthasInstancesGet']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ToolsApi - factory interface
 * @export
 */
export const ToolsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ToolsApiFp(configuration);
  return {
    /**
     * 启动并连接指定实例的 Arthas。连接成功后，前端应通过 WebSocket 连接服务器以实时获取 Arthas 控制台输出。
     * @summary 启动并连接目标实例的 Arthas
     * @param {string} instanceId 实例唯一标识
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arthasInstanceIdConnectPost(
      instanceId: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<OperationResponse> {
      return localVarFp
        .arthasInstanceIdConnectPost(instanceId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 断开指定实例的 Arthas 连接
     * @summary 断开与目标实例 Arthas 的连接
     * @param {string} instanceId 实例唯一标识
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arthasInstanceIdDisconnectPost(
      instanceId: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<OperationResponse> {
      return localVarFp
        .arthasInstanceIdDisconnectPost(instanceId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 重新连接指定实例的 Arthas
     * @summary 重新连接目标实例的 Arthas
     * @param {string} instanceId 实例唯一标识
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arthasInstanceIdReconnectPost(
      instanceId: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<OperationResponse> {
      return localVarFp
        .arthasInstanceIdReconnectPost(instanceId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 建立 WebSocket 连接以实时接收 Arthas 控制台输出和发送命令。   客户端应在调用 `/connect` 成功后，使用此接口建立 WebSocket 连接。   WebSocket 地址示例：`ws://localhost:8080/api/arthas/{instanceId}/ws`
     * @summary Arthas 控制台 WebSocket
     * @param {string} instanceId 实例唯一标识
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arthasInstanceIdWsGet(
      instanceId: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .arthasInstanceIdWsGet(instanceId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取所有应用实例及其 Arthas 状态
     * @summary 查询所有实例列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arthasInstancesGet(
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ArthasInstanceListResponse> {
      return localVarFp
        .arthasInstancesGet(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ToolsApi - interface
 * @export
 * @interface ToolsApi
 */
export interface ToolsApiInterface {
  /**
   * 启动并连接指定实例的 Arthas。连接成功后，前端应通过 WebSocket 连接服务器以实时获取 Arthas 控制台输出。
   * @summary 启动并连接目标实例的 Arthas
   * @param {string} instanceId 实例唯一标识
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolsApiInterface
   */
  arthasInstanceIdConnectPost(
    instanceId: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<OperationResponse>;

  /**
   * 断开指定实例的 Arthas 连接
   * @summary 断开与目标实例 Arthas 的连接
   * @param {string} instanceId 实例唯一标识
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolsApiInterface
   */
  arthasInstanceIdDisconnectPost(
    instanceId: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<OperationResponse>;

  /**
   * 重新连接指定实例的 Arthas
   * @summary 重新连接目标实例的 Arthas
   * @param {string} instanceId 实例唯一标识
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolsApiInterface
   */
  arthasInstanceIdReconnectPost(
    instanceId: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<OperationResponse>;

  /**
   * 建立 WebSocket 连接以实时接收 Arthas 控制台输出和发送命令。   客户端应在调用 `/connect` 成功后，使用此接口建立 WebSocket 连接。   WebSocket 地址示例：`ws://localhost:8080/api/arthas/{instanceId}/ws`
   * @summary Arthas 控制台 WebSocket
   * @param {string} instanceId 实例唯一标识
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolsApiInterface
   */
  arthasInstanceIdWsGet(
    instanceId: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   * 获取所有应用实例及其 Arthas 状态
   * @summary 查询所有实例列表
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolsApiInterface
   */
  arthasInstancesGet(
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ArthasInstanceListResponse>;
}

/**
 * ToolsApi - object-oriented interface
 * @export
 * @class ToolsApi
 * @extends {BaseAPI}
 */
export class ToolsApi extends BaseAPI implements ToolsApiInterface {
  /**
   * 启动并连接指定实例的 Arthas。连接成功后，前端应通过 WebSocket 连接服务器以实时获取 Arthas 控制台输出。
   * @summary 启动并连接目标实例的 Arthas
   * @param {string} instanceId 实例唯一标识
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolsApi
   */
  public arthasInstanceIdConnectPost(
    instanceId: string,
    options?: RawAxiosRequestConfig
  ) {
    return ToolsApiFp(this.configuration)
      .arthasInstanceIdConnectPost(instanceId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 断开指定实例的 Arthas 连接
   * @summary 断开与目标实例 Arthas 的连接
   * @param {string} instanceId 实例唯一标识
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolsApi
   */
  public arthasInstanceIdDisconnectPost(
    instanceId: string,
    options?: RawAxiosRequestConfig
  ) {
    return ToolsApiFp(this.configuration)
      .arthasInstanceIdDisconnectPost(instanceId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 重新连接指定实例的 Arthas
   * @summary 重新连接目标实例的 Arthas
   * @param {string} instanceId 实例唯一标识
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolsApi
   */
  public arthasInstanceIdReconnectPost(
    instanceId: string,
    options?: RawAxiosRequestConfig
  ) {
    return ToolsApiFp(this.configuration)
      .arthasInstanceIdReconnectPost(instanceId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 建立 WebSocket 连接以实时接收 Arthas 控制台输出和发送命令。   客户端应在调用 `/connect` 成功后，使用此接口建立 WebSocket 连接。   WebSocket 地址示例：`ws://localhost:8080/api/arthas/{instanceId}/ws`
   * @summary Arthas 控制台 WebSocket
   * @param {string} instanceId 实例唯一标识
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolsApi
   */
  public arthasInstanceIdWsGet(
    instanceId: string,
    options?: RawAxiosRequestConfig
  ) {
    return ToolsApiFp(this.configuration)
      .arthasInstanceIdWsGet(instanceId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取所有应用实例及其 Arthas 状态
   * @summary 查询所有实例列表
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolsApi
   */
  public arthasInstancesGet(options?: RawAxiosRequestConfig) {
    return ToolsApiFp(this.configuration)
      .arthasInstancesGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
